{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport styles from \"./styles\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Counter = function (_PureComponent) {\n  _inherits(Counter, _PureComponent);\n\n  var _super = _createSuper(Counter);\n\n  function Counter() {\n    _classCallCheck(this, Counter);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          count = _this$props.count,\n          limit = _this$props.limit,\n          baseColor = _this$props.baseColor,\n          errorColor = _this$props.errorColor,\n          style = _this$props.style;\n\n      if (!limit) {\n        return null;\n      }\n\n      var textStyle = {\n        color: count > limit ? errorColor : baseColor\n      };\n      return _jsxs(Text, {\n        style: [styles.text, style, textStyle],\n        children: [count, \" / \", limit]\n      });\n    }\n  }]);\n\n  return Counter;\n}(PureComponent);\n\nCounter.propTypes = {\n  count: PropTypes.number.isRequired,\n  limit: PropTypes.number,\n  baseColor: PropTypes.string.isRequired,\n  errorColor: PropTypes.string.isRequired,\n  style: Text.propTypes.style\n};\nexport { Counter as default };","map":{"version":3,"sources":["/home/alonso/Documents/programming/GymBooking/node_modules/react-native-material-textfield/src/components/counter/index.js"],"names":["PropTypes","React","PureComponent","styles","Counter","props","count","limit","baseColor","errorColor","style","textStyle","color","text","propTypes","number","isRequired","string","Text"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;AAGA,OAAOC,MAAP;;;IAEqBC,O;;;;;;;;;;;;;WAWnB,kBAAS;AACP,wBAAqD,KAAKC,KAA1D;AAAA,UAAMC,KAAN,eAAMA,KAAN;AAAA,UAAaC,KAAb,eAAaA,KAAb;AAAA,UAAoBC,SAApB,eAAoBA,SAApB;AAAA,UAA+BC,UAA/B,eAA+BA,UAA/B;AAAA,UAA2CC,KAA3C,eAA2CA,KAA3C;;AAEA,UAAI,CAACH,KAAL,EAAY;AACV,eAAO,IAAP;AACD;;AAED,UAAII,SAAS,GAAG;AACdC,QAAAA,KAAK,EAAEN,KAAK,GAAGC,KAAR,GACLE,UADK,GAELD;AAHY,OAAhB;AAMA,aACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACL,MAAM,CAACU,IAAR,EAAcH,KAAd,EAAqBC,SAArB,CAAb;AAAA,mBACGL,KADH,SACaC,KADb;AAAA,QADF;AAKD;;;;EA7BkCL,a;;AAAhBE,O,CACZU,S,GAAY;AACjBR,EAAAA,KAAK,EAAEN,SAAS,CAACe,MAAV,CAAiBC,UADP;AAEjBT,EAAAA,KAAK,EAAEP,SAAS,CAACe,MAFA;AAIjBP,EAAAA,SAAS,EAAER,SAAS,CAACiB,MAAV,CAAiBD,UAJX;AAKjBP,EAAAA,UAAU,EAAET,SAAS,CAACiB,MAAV,CAAiBD,UALZ;AAOjBN,EAAAA,KAAK,EAAEQ,IAAI,CAACJ,SAAL,CAAeJ;AAPL,C;SADAN,O","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { Text } from 'react-native';\n\nimport styles from './styles';\n\nexport default class Counter extends PureComponent {\n  static propTypes = {\n    count: PropTypes.number.isRequired,\n    limit: PropTypes.number,\n\n    baseColor: PropTypes.string.isRequired,\n    errorColor: PropTypes.string.isRequired,\n\n    style: Text.propTypes.style,\n  };\n\n  render() {\n    let { count, limit, baseColor, errorColor, style } = this.props;\n\n    if (!limit) {\n      return null;\n    }\n\n    let textStyle = {\n      color: count > limit?\n        errorColor:\n        baseColor,\n    };\n\n    return (\n      <Text style={[styles.text, style, textStyle]}>\n        {count} / {limit}\n      </Text>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}