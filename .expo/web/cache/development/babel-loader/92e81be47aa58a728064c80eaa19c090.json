{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport styles from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar lineTypes = PropTypes.oneOf(['solid', 'dotted', 'dashed', 'none']);\n\nvar Line = function (_PureComponent) {\n  _inherits(Line, _PureComponent);\n\n  var _super = _createSuper(Line);\n\n  function Line() {\n    var _this;\n\n    _classCallCheck(this, Line);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      maxLineWidth: 1\n    };\n    return _this;\n  }\n\n  _createClass(Line, [{\n    key: \"borderProps\",\n    value: function borderProps() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          restricted = _this$props.restricted,\n          lineWidth = _this$props.lineWidth,\n          activeLineWidth = _this$props.activeLineWidth,\n          disabledLineWidth = _this$props.disabledLineWidth,\n          baseColor = _this$props.baseColor,\n          tintColor = _this$props.tintColor,\n          errorColor = _this$props.errorColor,\n          focusAnimation = _this$props.focusAnimation;\n\n      if (disabled) {\n        return {\n          borderColor: baseColor,\n          borderWidth: disabledLineWidth\n        };\n      }\n\n      if (restricted) {\n        return {\n          borderColor: errorColor,\n          borderWidth: activeLineWidth\n        };\n      }\n\n      return {\n        borderColor: focusAnimation.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [errorColor, baseColor, tintColor]\n        }),\n        borderWidth: focusAnimation.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [activeLineWidth, lineWidth, activeLineWidth]\n        })\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var maxLineWidth = this.state.maxLineWidth;\n      var _this$props2 = this.props,\n          disabled = _this$props2.disabled,\n          lineType = _this$props2.lineType,\n          disabledLineType = _this$props2.disabledLineType;\n      var borderStyle = disabled ? disabledLineType : lineType;\n\n      if ('none' === borderStyle) {\n        return null;\n      }\n\n      var _Array$from = Array.from(new Array(3), function () {\n        return -1.5 * maxLineWidth;\n      }),\n          _Array$from2 = _slicedToArray(_Array$from, 3),\n          top = _Array$from2[0],\n          right = _Array$from2[1],\n          left = _Array$from2[2];\n\n      var lineStyle = _objectSpread(_objectSpread({}, this.borderProps()), {}, {\n        borderStyle: borderStyle,\n        top: top,\n        right: right,\n        left: left\n      });\n\n      return _jsx(View, {\n        style: styles.container,\n        pointerEvents: \"none\",\n        children: _jsx(Animated.View, {\n          style: [styles.line, lineStyle]\n        })\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var lineWidth = props.lineWidth,\n          activeLineWidth = props.activeLineWidth,\n          disabledLineWidth = props.disabledLineWidth;\n      var maxLineWidth = Math.max(lineWidth, activeLineWidth, disabledLineWidth, 1);\n\n      if (maxLineWidth !== state.maxLineWidth) {\n        return {\n          maxLineWidth: maxLineWidth\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Line;\n}(PureComponent);\n\nLine.defaultProps = {\n  lineType: 'solid',\n  disabledLineType: 'dotted',\n  disabled: false,\n  restricted: false\n};\nLine.propTypes = {\n  lineType: lineTypes,\n  disabledLineType: lineTypes,\n  disabled: PropTypes.bool,\n  restricted: PropTypes.bool,\n  tintColor: PropTypes.string,\n  baseColor: PropTypes.string,\n  errorColor: PropTypes.string,\n  lineWidth: PropTypes.number,\n  activeLineWidth: PropTypes.number,\n  disabledLineWidth: PropTypes.number,\n  focusAnimation: PropTypes.instanceOf(Animated.Value)\n};\nexport { Line as default };","map":{"version":3,"sources":["/home/alonso/Documents/programming/GymBooking/node_modules/react-native-material-textfield/src/components/line/index.js"],"names":["PropTypes","React","PureComponent","styles","lineTypes","oneOf","Line","state","maxLineWidth","props","disabled","restricted","lineWidth","activeLineWidth","disabledLineWidth","baseColor","tintColor","errorColor","focusAnimation","borderColor","borderWidth","interpolate","inputRange","outputRange","lineType","disabledLineType","borderStyle","Array","from","top","right","left","lineStyle","borderProps","container","line","Math","max","defaultProps","propTypes","bool","string","number","instanceOf","Animated","Value"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { View, Animated } from 'react-native';\n\nimport styles from './styles';\n\nconst lineTypes = PropTypes\n  .oneOf(['solid', 'dotted', 'dashed', 'none']);\n\nexport default class Line extends PureComponent {\n  static defaultProps = {\n    lineType: 'solid',\n    disabledLineType: 'dotted',\n\n    disabled: false,\n    restricted: false,\n  };\n\n  static propTypes = {\n    lineType: lineTypes,\n    disabledLineType: lineTypes,\n\n    disabled: PropTypes.bool,\n    restricted: PropTypes.bool,\n\n    tintColor: PropTypes.string,\n    baseColor: PropTypes.string,\n    errorColor: PropTypes.string,\n\n    lineWidth: PropTypes.number,\n    activeLineWidth: PropTypes.number,\n    disabledLineWidth: PropTypes.number,\n\n    focusAnimation: PropTypes.instanceOf(Animated.Value),\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    let { lineWidth, activeLineWidth, disabledLineWidth } = props;\n\n    let maxLineWidth = Math.max(\n      lineWidth,\n      activeLineWidth,\n      disabledLineWidth,\n      1,\n    );\n\n    if (maxLineWidth !== state.maxLineWidth) {\n      return { maxLineWidth };\n    }\n\n    return null;\n  }\n\n  state = { maxLineWidth: 1 };\n\n  borderProps() {\n    let {\n      disabled,\n      restricted,\n      lineWidth,\n      activeLineWidth,\n      disabledLineWidth,\n      baseColor,\n      tintColor,\n      errorColor,\n      focusAnimation,\n    } = this.props;\n\n    if (disabled) {\n      return {\n        borderColor: baseColor,\n        borderWidth: disabledLineWidth,\n      };\n    }\n\n    if (restricted) {\n      return {\n        borderColor: errorColor,\n        borderWidth: activeLineWidth,\n      };\n    }\n\n    return {\n      borderColor: focusAnimation.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [errorColor, baseColor, tintColor],\n      }),\n\n      borderWidth: focusAnimation.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [activeLineWidth, lineWidth, activeLineWidth],\n      }),\n    };\n  }\n\n  render() {\n    let { maxLineWidth } = this.state;\n    let { disabled, lineType, disabledLineType } = this.props;\n\n    let borderStyle = disabled?\n      disabledLineType:\n      lineType;\n\n    if ('none' === borderStyle) {\n      return null;\n    }\n\n    let [top, right, left] = Array\n      .from(new Array(3), () => -1.5 * maxLineWidth);\n\n    let lineStyle = {\n      ...this.borderProps(),\n\n      borderStyle,\n      top,\n      right,\n      left,\n    };\n\n    return (\n      <View style={styles.container} pointerEvents='none'>\n        <Animated.View style={[styles.line, lineStyle]} />\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}