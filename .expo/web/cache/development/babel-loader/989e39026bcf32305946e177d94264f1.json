{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { Fragment, PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport styles, { borderRadius } from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Line = function (_PureComponent) {\n  _inherits(Line, _PureComponent);\n\n  var _super = _createSuper(Line);\n\n  function Line() {\n    _classCallCheck(this, Line);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Line, [{\n    key: \"borderProps\",\n    value: function borderProps() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          restricted = _this$props.restricted,\n          lineType = _this$props.lineType,\n          lineWidth = _this$props.lineWidth,\n          activeLineWidth = _this$props.activeLineWidth,\n          disabledLineWidth = _this$props.disabledLineWidth,\n          baseColor = _this$props.baseColor,\n          tintColor = _this$props.tintColor,\n          errorColor = _this$props.errorColor,\n          focusAnimation = _this$props.focusAnimation;\n\n      if (disabled) {\n        return {\n          borderColor: baseColor,\n          borderWidth: disabledLineWidth\n        };\n      }\n\n      if (restricted) {\n        return {\n          borderColor: errorColor,\n          borderWidth: activeLineWidth\n        };\n      }\n\n      return {\n        borderColor: focusAnimation.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [errorColor, baseColor, tintColor]\n        }),\n        borderWidth: focusAnimation.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [activeLineWidth, lineWidth, activeLineWidth]\n        }),\n        borderStyle: lineType\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          lineType = _this$props2.lineType,\n          labelWidth = _this$props2.labelWidth,\n          labelAnimation = _this$props2.labelAnimation,\n          contentInset = _this$props2.contentInset;\n\n      if ('none' === lineType) {\n        return null;\n      }\n\n      var labelOffset = 2 * (contentInset.left - 2 * borderRadius);\n      var lineOffset = Animated.add(labelWidth, labelOffset);\n      var topLineContainerStyle = {\n        transform: [{\n          scaleX: I18nManager.isRTL ? -1 : 1\n        }, {\n          translateX: Animated.multiply(labelAnimation, lineOffset)\n        }]\n      };\n      var leftContainerStyle = {\n        width: contentInset.left - borderRadius\n      };\n      var rightContainerStyle = {\n        width: contentInset.right - borderRadius\n      };\n      var topContainerStyle = {\n        left: leftContainerStyle.width,\n        right: rightContainerStyle.width\n      };\n      var lineStyle = this.borderProps();\n      return _jsxs(Fragment, {\n        children: [_jsx(View, {\n          style: [styles.topContainer, topContainerStyle],\n          pointerEvents: \"none\",\n          children: _jsx(Animated.View, {\n            style: [styles.topLineContainer, topLineContainerStyle],\n            children: _jsx(Animated.View, {\n              style: [styles.borderTop, lineStyle]\n            })\n          })\n        }), _jsx(View, {\n          style: [styles.rightContainer, rightContainerStyle],\n          pointerEvents: \"none\",\n          children: _jsx(Animated.View, {\n            style: [styles.borderRight, lineStyle]\n          })\n        }), _jsx(View, {\n          style: styles.bottomContainer,\n          pointerEvents: \"none\",\n          children: _jsx(Animated.View, {\n            style: [styles.borderBottom, lineStyle]\n          })\n        }), _jsx(View, {\n          style: [styles.leftContainer, leftContainerStyle],\n          pointerEvents: \"none\",\n          children: _jsx(Animated.View, {\n            style: [styles.borderLeft, lineStyle]\n          })\n        })]\n      });\n    }\n  }]);\n\n  return Line;\n}(PureComponent);\n\nLine.defaultProps = {\n  lineType: 'solid',\n  disabled: false,\n  restricted: false\n};\nLine.propTypes = {\n  lineType: PropTypes.oneOf(['solid', 'none']),\n  disabled: PropTypes.bool,\n  restricted: PropTypes.bool,\n  tintColor: PropTypes.string,\n  baseColor: PropTypes.string,\n  errorColor: PropTypes.string,\n  lineWidth: PropTypes.number,\n  activeLineWidth: PropTypes.number,\n  disabledLineWidth: PropTypes.number,\n  focusAnimation: PropTypes.instanceOf(Animated.Value),\n  labelAnimation: PropTypes.instanceOf(Animated.Value),\n  labelWidth: PropTypes.instanceOf(Animated.Value),\n  contentInset: PropTypes.shape({\n    left: PropTypes.number,\n    right: PropTypes.number\n  })\n};\nexport { Line as default };","map":{"version":3,"sources":["/home/alonso/Documents/programming/GymBooking/node_modules/react-native-material-textfield/src/components/outline/index.js"],"names":["PropTypes","React","Fragment","PureComponent","styles","borderRadius","Line","props","disabled","restricted","lineType","lineWidth","activeLineWidth","disabledLineWidth","baseColor","tintColor","errorColor","focusAnimation","borderColor","borderWidth","interpolate","inputRange","outputRange","borderStyle","labelWidth","labelAnimation","contentInset","labelOffset","left","lineOffset","Animated","add","topLineContainerStyle","transform","scaleX","I18nManager","isRTL","translateX","multiply","leftContainerStyle","width","rightContainerStyle","right","topContainerStyle","lineStyle","borderProps","topContainer","topLineContainer","borderTop","rightContainer","borderRight","bottomContainer","borderBottom","leftContainer","borderLeft","defaultProps","propTypes","oneOf","bool","string","number","instanceOf","Value","shape"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Fragment, PureComponent } from 'react';\nimport { View, Animated, I18nManager } from 'react-native';\n\nimport styles, { borderRadius } from './styles';\n\nexport default class Line extends PureComponent {\n  static defaultProps = {\n    lineType: 'solid',\n    disabled: false,\n    restricted: false,\n  };\n\n  static propTypes = {\n    lineType: PropTypes.oneOf(['solid', 'none']),\n\n    disabled: PropTypes.bool,\n    restricted: PropTypes.bool,\n\n    tintColor: PropTypes.string,\n    baseColor: PropTypes.string,\n    errorColor: PropTypes.string,\n\n    lineWidth: PropTypes.number,\n    activeLineWidth: PropTypes.number,\n    disabledLineWidth: PropTypes.number,\n\n    focusAnimation: PropTypes.instanceOf(Animated.Value),\n    labelAnimation: PropTypes.instanceOf(Animated.Value),\n    labelWidth: PropTypes.instanceOf(Animated.Value),\n\n    contentInset: PropTypes.shape({\n      left: PropTypes.number,\n      right: PropTypes.number,\n    }),\n  };\n\n  borderProps() {\n    let {\n      disabled,\n      restricted,\n      lineType,\n      lineWidth,\n      activeLineWidth,\n      disabledLineWidth,\n      baseColor,\n      tintColor,\n      errorColor,\n      focusAnimation,\n    } = this.props;\n\n    if (disabled) {\n      return {\n        borderColor: baseColor,\n        borderWidth: disabledLineWidth,\n      };\n    }\n\n    if (restricted) {\n      return {\n        borderColor: errorColor,\n        borderWidth: activeLineWidth,\n      };\n    }\n\n    return {\n      borderColor: focusAnimation.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [errorColor, baseColor, tintColor],\n      }),\n\n      borderWidth: focusAnimation.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [activeLineWidth, lineWidth, activeLineWidth],\n      }),\n\n      borderStyle: lineType,\n    };\n  }\n\n  render() {\n    let { lineType, labelWidth, labelAnimation, contentInset } = this.props;\n\n    if ('none' === lineType) {\n      return null;\n    }\n\n    let labelOffset = 2 * (contentInset.left - 2 * borderRadius);\n    let lineOffset = Animated.add(labelWidth, labelOffset);\n\n    let topLineContainerStyle = {\n      transform: [{\n        scaleX: I18nManager.isRTL? -1 : 1,\n      }, {\n        translateX: Animated.multiply(labelAnimation, lineOffset),\n      }],\n    };\n\n    let leftContainerStyle = {\n      width: contentInset.left - borderRadius,\n    };\n\n    let rightContainerStyle = {\n      width: contentInset.right - borderRadius,\n    };\n\n    let topContainerStyle = {\n      left: leftContainerStyle.width,\n      right: rightContainerStyle.width,\n    };\n\n    let lineStyle = this.borderProps();\n\n    return (\n      <Fragment>\n        <View style={[styles.topContainer, topContainerStyle]} pointerEvents='none'>\n          <Animated.View style={[styles.topLineContainer, topLineContainerStyle]}>\n            <Animated.View style={[styles.borderTop, lineStyle]} />\n          </Animated.View>\n        </View>\n\n        <View style={[styles.rightContainer, rightContainerStyle]} pointerEvents='none'>\n          <Animated.View style={[styles.borderRight, lineStyle]} />\n        </View>\n\n        <View style={styles.bottomContainer} pointerEvents='none'>\n          <Animated.View style={[styles.borderBottom, lineStyle]} />\n        </View>\n\n        <View style={[styles.leftContainer, leftContainerStyle]} pointerEvents='none'>\n          <Animated.View style={[styles.borderLeft, lineStyle]} />\n        </View>\n      </Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}